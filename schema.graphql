# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Car {
    id: Int!
    name: String!
    numberState: String!
    trailerNumberState: String!
}

type Counterparty {
    account: String!
    accountOfBank: String!
    apartment: String
    apartmentUnit: String
    bank: String!
    bik: String!
    businessStructure: String!
    businessStructureBank: String!
    city: String!
    email: String!
    fullName: String!
    house: String!
    houseUnit: String!
    id: Int!
    inn: String!
    kpp: String!
    locationIndex: String!
    name: String!
    participant: String!
    region: String!
    settlement: String!
    street: String!
    streetUnit: String!
    subFederalUnit: String!
}

type Docs {
    consumerId: Int!
    contractorId: Int!
    date: String!
    id: Int!
    pay: Boolean
    post: Boolean
}

type Driver {
    firstname: String!
    id: Int!
    lastname: String!
    surname: String!
}

type Mutation {
    createCar(createCarInput: CreateCarInput!): Car!
    createCounterparty(createCounterpartyInput: CreateCounterpartyInput!): Counterparty!
    createDocs(createDocsInput: CreateDocsInput!): Docs!
    createDriver(createDriverInput: CreateDriverInput!): Driver!
    createTrip(createTripInput: CreateTripInput!): Trip!
    createUser(createUserInput: CreateUserInput!): User!
    removeCar(id: Int!): Car
    removeCounterparty(id: Int!): Counterparty
    removeDocs(id: Int!): Docs
    removeDriver(id: Int!): Driver
    removeTrip(id: Int!): Trip
    removeUser(id: Int!): User!
    updateCar(updateCarInput: UpdateCarInput!): Car!
    updateCounterparty(updateCounterpartyInput: UpdateCounterpartyInput!): Counterparty!
    updateDocs(updateDocsInput: UpdateDocsInput!): Docs!
    updateDriver(updateDriverInput: UpdateDriverInput!): Driver!
    updateTrip(updateTripInput: UpdateTripInput!): Trip!
    updateUser(updateUserInput: UpdateUserInput!): User!
}

type Query {
    car(id: Int!): Car
    cars: [Car]!
    counterparties: [Counterparty]!
    counterparty(id: Int!): Counterparty
    doc(id: Int!): Docs
    docs: [Docs]!
    driver(id: Int!): Driver
    drivers: [Driver]!
    trip(id: Int!): Trip
    trips: [Trip]!
    user(id: Int!): User!
    users: [User]!
}

type Trip {
    carId: Int!
    consumerId: Int!
    contractorId: Int!
    dateFor: String!
    dateTo: String
    docsId: Int
    driverId: Int!
    id: Int!
    itinerary: String!
    price: Int!
    quantity: Int!
    quantityUnit: String!
}

type User {
    email: String!
    id: Int!
    password: String!
    username: String!
}

input CreateCarInput {
    name: String!
    numberState: String!
    trailerNumberState: String!
}

input CreateCounterpartyInput {
    account: String!
    accountOfBank: String!
    apartment: String
    apartmentUnit: String
    bank: String!
    bik: String!
    businessStructure: String!
    businessStructureBank: String!
    city: String!
    email: String!
    fullName: String!
    house: String!
    houseUnit: String!
    inn: String!
    kpp: String!
    locationIndex: String!
    name: String!
    participant: String!
    region: String!
    settlement: String!
    street: String!
    streetUnit: String!
    subFederalUnit: String!
}

input CreateDocsInput {
    consumerId: Int!
    contractorId: Int!
    date: String!
    pay: Boolean
    post: Boolean
}

input CreateDriverInput {
    firstname: String!
    lastname: String!
    surname: String!
}

input CreateTripInput {
    carId: Int!
    consumerId: Int!
    contractorId: Int!
    dateFor: String!
    dateTo: String
    docsId: Int
    driverId: Int!
    itinerary: String!
    price: Int!
    quantity: Int!
    quantityUnit: String!
}

input CreateUserInput {
    email: String!
    password: String!
    username: String!
}

input UpdateCarInput {
    id: Int!
    name: String!
    numberState: String!
    trailerNumberState: String!
}

input UpdateCounterpartyInput {
    account: String
    accountOfBank: String
    apartment: String
    apartmentUnit: String
    bank: String
    bik: String
    businessStructure: String
    businessStructureBank: String
    city: String
    email: String
    fullName: String
    house: String
    houseUnit: String
    id: Int!
    inn: String
    kpp: String
    locationIndex: String
    name: String
    participant: String
    region: String
    settlement: String
    street: String
    streetUnit: String
    subFederalUnit: String
}

input UpdateDocsInput {
    consumerId: Int!
    contractorId: Int!
    date: String!
    id: Int!
    pay: Boolean
    post: Boolean
}

input UpdateDriverInput {
    firstname: String!
    id: Int!
    lastname: String!
    surname: String!
}

input UpdateTripInput {
    carId: Int!
    consumerId: Int!
    contractorId: Int!
    dateFor: String!
    dateTo: String
    docsId: Int
    driverId: Int!
    id: Int!
    itinerary: String!
    price: Int!
    quantity: Int!
    quantityUnit: String!
}

input UpdateUserInput {
    email: String
    id: Int!
    password: String
    username: String
}
